// <auto-generated />
using System;
using Cotton.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cotton.Server.Migrations
{
    [DbContext(typeof(CottonDbContext))]
    partial class CottonDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cotton.Server.Database.Models.Blob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("FileSha256")
                        .IsRequired()
                        .HasColumnType("BINARY(32)")
                        .HasColumnName("file_sha256");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("parent");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_bytes");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId", "Parent");

                    b.HasIndex("OwnerId", "FileSha256", "SizeBytes")
                        .IsUnique();

                    b.HasIndex("OwnerId", "Parent", "Name")
                        .IsUnique();

                    b.ToTable("blobs");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.BlobChunk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BlobId")
                        .HasColumnType("uuid")
                        .HasColumnName("blob_id");

                    b.Property<byte[]>("ChunkSha256")
                        .IsRequired()
                        .HasColumnType("BINARY(32)")
                        .HasColumnName("chunk_sha256");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("chunk_order");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ChunkSha256");

                    b.HasIndex("BlobId", "Order")
                        .IsUnique();

                    b.ToTable("blob_chunks");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Chunk", b =>
                {
                    b.Property<byte[]>("Sha256")
                        .HasColumnType("BINARY(32)")
                        .HasColumnName("sha256");

                    b.HasKey("Sha256");

                    b.ToTable("chunks");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.BlobChunk", b =>
                {
                    b.HasOne("Cotton.Server.Database.Models.Blob", "Blob")
                        .WithMany("BlobChunks")
                        .HasForeignKey("BlobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cotton.Server.Database.Models.Chunk", "Chunk")
                        .WithMany()
                        .HasForeignKey("ChunkSha256")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blob");

                    b.Navigation("Chunk");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Blob", b =>
                {
                    b.Navigation("BlobChunks");
                });
#pragma warning restore 612, 618
        }
    }
}
