// <auto-generated />
using System;
using Cotton.Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cotton.Server.Migrations
{
    [DbContext(typeof(CottonDbContext))]
    [Migration("20251101052653_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cotton.Server.Database.Models.Chunk", b =>
                {
                    b.Property<byte[]>("Sha256")
                        .HasColumnType("bytea")
                        .HasColumnName("sha256");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_bytes");

                    b.HasKey("Sha256");

                    b.ToTable("chunks");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.ChunkOwnership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("ChunkSha256")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("chunk_sha256");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId", "ChunkSha256")
                        .IsUnique();

                    b.ToTable("chunk_ownerships");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.FileManifest", b =>
                {
                    b.Property<byte[]>("Sha256")
                        .HasColumnType("bytea")
                        .HasColumnName("sha256");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_type");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("size_bytes");

                    b.HasKey("Sha256");

                    b.ToTable("file_manifests");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.FileManifestChunk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ChunkOrder")
                        .HasColumnType("integer")
                        .HasColumnName("chunk_order");

                    b.Property<byte[]>("ChunkSha256")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("chunk_sha256");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("FileManifestSha256")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_manifest_sha256");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ChunkSha256");

                    b.HasIndex("FileManifestSha256", "ChunkOrder")
                        .IsUnique();

                    b.ToTable("file_manifest_chunks");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Layout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("layouts");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("LayoutId")
                        .HasColumnType("uuid")
                        .HasColumnName("layout_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_key");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ParentId");

                    b.HasIndex("LayoutId", "ParentId", "Type", "NameKey")
                        .IsUnique();

                    b.ToTable("nodes");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.NodeFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("FileManifestId")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_manifest_sha256");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameKey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name_key");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("node_id");

                    b.Property<Guid>("OriginalNodeFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("original_node_file_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("FileManifestId", "NodeId")
                        .IsUnique();

                    b.HasIndex("NodeId", "NameKey")
                        .IsUnique();

                    b.ToTable("node_files");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PasswordPhc")
                        .HasColumnType("text")
                        .HasColumnName("password_phc");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.ChunkOwnership", b =>
                {
                    b.HasOne("Cotton.Server.Database.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.FileManifestChunk", b =>
                {
                    b.HasOne("Cotton.Server.Database.Models.Chunk", "Chunk")
                        .WithMany()
                        .HasForeignKey("ChunkSha256")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cotton.Server.Database.Models.FileManifest", "FileManifest")
                        .WithMany("FileManifestChunks")
                        .HasForeignKey("FileManifestSha256")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chunk");

                    b.Navigation("FileManifest");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Layout", b =>
                {
                    b.HasOne("Cotton.Server.Database.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Node", b =>
                {
                    b.HasOne("Cotton.Server.Database.Models.Layout", "Layout")
                        .WithMany("Nodes")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cotton.Server.Database.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cotton.Server.Database.Models.Node", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Layout");

                    b.Navigation("Owner");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.NodeFile", b =>
                {
                    b.HasOne("Cotton.Server.Database.Models.FileManifest", "FileManifest")
                        .WithMany()
                        .HasForeignKey("FileManifestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cotton.Server.Database.Models.Node", "Node")
                        .WithMany("LayoutNodeFiles")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cotton.Server.Database.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileManifest");

                    b.Navigation("Node");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.FileManifest", b =>
                {
                    b.Navigation("FileManifestChunks");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Layout", b =>
                {
                    b.Navigation("Nodes");
                });

            modelBuilder.Entity("Cotton.Server.Database.Models.Node", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("LayoutNodeFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
