import re
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib.patches import Rectangle
import matplotlib.gridspec as gridspec

def parse_test_results(filename):
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    
    with open(filename, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    encrypt_section = re.search(r'=== ENCRYPTION THREAD/CHUNK SWEEP ===(.*?)(?===|$)', content, re.DOTALL)
    decrypt_section = re.search(r'=== DECRYPTION THREAD/CHUNK SWEEP ===(.*?)(?===|$)', content, re.DOTALL)
    
    def extract_data(section_text):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å–µ–∫—Ü–∏–∏"""
        if not section_text:
            return pd.DataFrame()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ (—Ñ–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ | —á–∏—Å–ª–æ | —á–∏—Å–ª–æ.—á–∏—Å–ª–æ)
        pattern = r'(\d+)\s*\|\s*(\d+)\s*\|\s*([\d.]+)'
        matches = re.findall(pattern, section_text)
        
        data = []
        for match in matches:
            threads = int(match[0])
            chunk_mb = int(match[1])
            throughput = float(match[2])
            data.append({'Threads': threads, 'ChunkMB': chunk_mb, 'Throughput': throughput})
        
        return pd.DataFrame(data)
    
    encrypt_data = extract_data(encrypt_section.group(1) if encrypt_section else "")
    decrypt_data = extract_data(decrypt_section.group(1) if decrypt_section else "")
    
    return encrypt_data, decrypt_data

def create_mega_analysis(encrypt_data, decrypt_data):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 12 –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å
    plt.style.use('default')
    sns.set_palette("husl")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à—É—é —Ñ–∏–≥—É—Ä—É —Å 12 —Å—É–±–ø–ª–æ—Ç–∞–º–∏
    fig = plt.figure(figsize=(24, 18))
    gs = gridspec.GridSpec(4, 3, hspace=0.3, wspace=0.25, 
                          left=0.05, right=0.95, top=0.95, bottom=0.05)
    
    fig.suptitle('üöÄ MEGA Performance Analysis: Complete Encryption/Decryption Study', 
                 fontsize=20, fontweight='bold', y=0.97)
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å–Ω–æ–≤–Ω—ã–µ 4 –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –º–∏–Ω–∏-–≤–µ—Ä—Å–∏–∏
    ax1 = fig.add_subplot(gs[0, 0])
    ax2 = fig.add_subplot(gs[0, 1]) 
    ax3 = fig.add_subplot(gs[0, 2])
    ax4 = fig.add_subplot(gs[1, 0])
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
    ax5 = fig.add_subplot(gs[1, 1])   # Heat map
    ax6 = fig.add_subplot(gs[1, 2])   # 3D surface plot style
    ax7 = fig.add_subplot(gs[2, 0])   # Distribution plots
    ax8 = fig.add_subplot(gs[2, 1])   # Efficiency metrics
    ax9 = fig.add_subplot(gs[2, 2])   # Speed ratios
    ax10 = fig.add_subplot(gs[3, 0])  # Performance zones
    ax11 = fig.add_subplot(gs[3, 1])  # Optimization suggestions
    ax12 = fig.add_subplot(gs[3, 2])  # Summary dashboard
    
    unique_threads = sorted(encrypt_data['Threads'].unique())
    unique_chunks = sorted(encrypt_data['ChunkMB'].unique())
    
    # 1. Encrypt: throughput vs chunk size (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    colors = plt.cm.Set1(np.linspace(0, 1, len(unique_threads)))
    for i, threads in enumerate(unique_threads):
        thread_data = encrypt_data[encrypt_data['Threads'] == threads].sort_values('ChunkMB')
        ax1.plot(thread_data['ChunkMB'], thread_data['Throughput'], 
                marker='o', label=f'{threads}T', linewidth=1.5, markersize=4, color=colors[i])
    ax1.set_title('Encrypt: Throughput vs Chunks', fontsize=12, fontweight='bold')
    ax1.set_xlabel('Chunk Size (MB)')
    ax1.set_ylabel('MB/s')
    ax1.legend(ncol=2, fontsize=8)
    ax1.grid(True, alpha=0.3)
    
    # 2. Decrypt: throughput vs chunk size (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    for i, threads in enumerate(unique_threads):
        thread_data = decrypt_data[decrypt_data['Threads'] == threads].sort_values('ChunkMB')
        ax2.plot(thread_data['ChunkMB'], thread_data['Throughput'], 
                marker='s', label=f'{threads}T', linewidth=1.5, markersize=4, color=colors[i])
    ax2.set_title('Decrypt: Throughput vs Chunks', fontsize=12, fontweight='bold')
    ax2.set_xlabel('Chunk Size (MB)')
    ax2.set_ylabel('MB/s')
    ax2.legend(ncol=2, fontsize=8)
    ax2.grid(True, alpha=0.3)
    
    # 3. Encrypt: throughput vs threads (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    chunk_colors = plt.cm.tab10(np.linspace(0, 1, len(unique_chunks)))
    for i, chunk_size in enumerate(unique_chunks):
        chunk_data = encrypt_data[encrypt_data['ChunkMB'] == chunk_size].sort_values('Threads')
        ax3.plot(chunk_data['Threads'], chunk_data['Throughput'], 
                marker='o', label=f'{int(chunk_size)}MB', linewidth=1.5, markersize=4, color=chunk_colors[i])
    ax3.set_title('Encrypt: Throughput vs Threads', fontsize=12, fontweight='bold')
    ax3.set_xlabel('Threads')
    ax3.set_ylabel('MB/s')
    ax3.legend(ncol=2, fontsize=8)
    ax3.grid(True, alpha=0.3)
    
    # 4. Decrypt: throughput vs threads (–∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è)
    for i, chunk_size in enumerate(unique_chunks):
        chunk_data = decrypt_data[decrypt_data['ChunkMB'] == chunk_size].sort_values('Threads')
        ax4.plot(chunk_data['Threads'], chunk_data['Throughput'], 
                marker='s', label=f'{int(chunk_size)}MB', linewidth=1.5, markersize=4, color=chunk_colors[i])
    ax4.set_title('Decrypt: Throughput vs Threads', fontsize=12, fontweight='bold')
    ax4.set_xlabel('Threads')
    ax4.set_ylabel('MB/s')
    ax4.legend(ncol=2, fontsize=8)
    ax4.grid(True, alpha=0.3)
    
    # 5. Heat Map - Performance Matrix
    encrypt_pivot = encrypt_data.pivot(index='Threads', columns='ChunkMB', values='Throughput')
    decrypt_pivot = decrypt_data.pivot(index='Threads', columns='ChunkMB', values='Throughput')
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é heat map
    combined_data = (encrypt_pivot + decrypt_pivot) / 2  # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    im = ax5.imshow(combined_data.values, cmap='viridis', aspect='auto')
    ax5.set_title('üî• Performance Heat Map\n(Average Encrypt+Decrypt)', fontsize=12, fontweight='bold')
    ax5.set_xlabel('Chunk Size (MB)')
    ax5.set_ylabel('Threads')
    ax5.set_xticks(range(len(unique_chunks)))
    ax5.set_xticklabels([str(int(x)) for x in unique_chunks])
    ax5.set_yticks(range(len(unique_threads)))
    ax5.set_yticklabels([str(int(x)) for x in unique_threads])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∏
    for i in range(len(unique_threads)):
        for j in range(len(unique_chunks)):
            text = ax5.text(j, i, f'{combined_data.iloc[i, j]:.0f}',
                           ha="center", va="center", color="white", fontsize=8, fontweight='bold')
    
    # 6. –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —á–∞–Ω–∫–æ–≤
    encrypt_by_chunk = encrypt_data.groupby('ChunkMB')['Throughput'].agg(['mean', 'std', 'max', 'min'])
    decrypt_by_chunk = decrypt_data.groupby('ChunkMB')['Throughput'].agg(['mean', 'std', 'max', 'min'])
    
    x = np.arange(len(unique_chunks))
    width = 0.35
    
    bars1 = ax6.bar(x - width/2, encrypt_by_chunk['mean'], width, 
                   yerr=encrypt_by_chunk['std'], label='Encrypt', 
                   alpha=0.8, capsize=5, color='skyblue')
    bars2 = ax6.bar(x + width/2, decrypt_by_chunk['mean'], width, 
                   yerr=decrypt_by_chunk['std'], label='Decrypt', 
                   alpha=0.8, capsize=5, color='lightcoral')
    
    ax6.set_title('üìä Average Performance by Chunk Size', fontsize=12, fontweight='bold')
    ax6.set_xlabel('Chunk Size (MB)')
    ax6.set_ylabel('Average Throughput (MB/s)')
    ax6.set_xticks(x)
    ax6.set_xticklabels([str(int(x)) for x in unique_chunks])
    ax6.legend()
    ax6.grid(True, alpha=0.3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for i, (bar1, bar2) in enumerate(zip(bars1, bars2)):
        ax6.text(bar1.get_x() + bar1.get_width()/2, bar1.get_height() + 100, 
                f'{encrypt_by_chunk.iloc[i]["mean"]:.0f}', 
                ha='center', va='bottom', fontsize=8, rotation=45)
        ax6.text(bar2.get_x() + bar2.get_width()/2, bar2.get_height() + 100, 
                f'{decrypt_by_chunk.iloc[i]["mean"]:.0f}', 
                ha='center', va='bottom', fontsize=8, rotation=45)
    
    # 7. Distribution Analysis - Violin plots
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è violin plot
    encrypt_melted = encrypt_data.melt(id_vars=['Threads', 'ChunkMB'], 
                                     value_vars=['Throughput'], 
                                     var_name='Metric', value_name='Value')
    encrypt_melted['Operation'] = 'Encrypt'
    
    decrypt_melted = decrypt_data.melt(id_vars=['Threads', 'ChunkMB'], 
                                     value_vars=['Throughput'], 
                                     var_name='Metric', value_name='Value')
    decrypt_melted['Operation'] = 'Decrypt'
    
    combined_melted = pd.concat([encrypt_melted, decrypt_melted])
    
    # –°–æ–∑–¥–∞–µ–º violin plot
    parts = ax7.violinplot([encrypt_data['Throughput'], decrypt_data['Throughput']], 
                          positions=[1, 2], showmeans=True, showextrema=True)
    
    for pc, color in zip(parts['bodies'], ['skyblue', 'lightcoral']):
        pc.set_facecolor(color)
        pc.set_alpha(0.7)
    
    ax7.set_title('üéª Performance Distribution', fontsize=12, fontweight='bold')
    ax7.set_ylabel('Throughput (MB/s)')
    ax7.set_xticks([1, 2])
    ax7.set_xticklabels(['Encrypt', 'Decrypt'])
    ax7.grid(True, alpha=0.3)
    
    # 8. Scaling Efficiency Analysis
    # –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    baseline_threads = 1
    scaling_data = []
    
    for chunk_size in unique_chunks:
        encrypt_baseline = encrypt_data[(encrypt_data['Threads'] == baseline_threads) & 
                                       (encrypt_data['ChunkMB'] == chunk_size)]['Throughput'].iloc[0]
        decrypt_baseline = decrypt_data[(decrypt_data['Threads'] == baseline_threads) & 
                                       (decrypt_data['ChunkMB'] == chunk_size)]['Throughput'].iloc[0]
        
        for threads in unique_threads:
            encrypt_current = encrypt_data[(encrypt_data['Threads'] == threads) & 
                                         (encrypt_data['ChunkMB'] == chunk_size)]['Throughput'].iloc[0]
            decrypt_current = decrypt_data[(decrypt_data['Threads'] == threads) & 
                                          (decrypt_data['ChunkMB'] == chunk_size)]['Throughput'].iloc[0]
            
            encrypt_efficiency = (encrypt_current / encrypt_baseline) / threads * 100
            decrypt_efficiency = (decrypt_current / decrypt_baseline) / threads * 100
            
            scaling_data.append({
                'Threads': threads,
                'ChunkMB': chunk_size,
                'Encrypt_Efficiency': encrypt_efficiency,
                'Decrypt_Efficiency': decrypt_efficiency
            })
    
    scaling_df = pd.DataFrame(scaling_data)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞
    mid_chunk = unique_chunks[len(unique_chunks)//2]
    mid_data = scaling_df[scaling_df['ChunkMB'] == mid_chunk]
    
    ax8.plot(mid_data['Threads'], mid_data['Encrypt_Efficiency'], 
            marker='o', linewidth=3, markersize=8, label='Encrypt Efficiency', color='blue')
    ax8.plot(mid_data['Threads'], mid_data['Decrypt_Efficiency'], 
            marker='s', linewidth=3, markersize=8, label='Decrypt Efficiency', color='red')
    ax8.axhline(y=100, color='gray', linestyle='--', alpha=0.7, label='Perfect Efficiency')
    
    ax8.set_title(f'‚ö° Scaling Efficiency ({mid_chunk}MB chunks)', fontsize=12, fontweight='bold')
    ax8.set_xlabel('Number of Threads')
    ax8.set_ylabel('Efficiency (%)')
    ax8.legend()
    ax8.grid(True, alpha=0.3)
    
    # 9. Speed Ratios Analysis
    ratio_data = []
    for _, encrypt_row in encrypt_data.iterrows():
        decrypt_row = decrypt_data[(decrypt_data['Threads'] == encrypt_row['Threads']) & 
                                  (decrypt_data['ChunkMB'] == encrypt_row['ChunkMB'])]
        if not decrypt_row.empty:
            ratio = decrypt_row['Throughput'].iloc[0] / encrypt_row['Throughput']
            ratio_data.append({
                'Threads': encrypt_row['Threads'],
                'ChunkMB': encrypt_row['ChunkMB'],
                'Decrypt_Encrypt_Ratio': ratio
            })
    
    ratio_df = pd.DataFrame(ratio_data)
    
    # –°–æ–∑–¥–∞–µ–º scatter plot —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Ç–æ—á–µ–∫
    scatter = ax9.scatter(ratio_df['Threads'], ratio_df['ChunkMB'], 
                         c=ratio_df['Decrypt_Encrypt_Ratio'], 
                         s=ratio_df['Decrypt_Encrypt_Ratio']*30, 
                         cmap='RdYlGn', alpha=0.7, edgecolors='black')
    
    ax9.set_title('üöÄ Decrypt/Encrypt Speed Ratios', fontsize=12, fontweight='bold')
    ax9.set_xlabel('Threads')
    ax9.set_ylabel('Chunk Size (MB)')
    
    # –î–æ–±–∞–≤–ª—è–µ–º colorbar
    cbar = plt.colorbar(scatter, ax=ax9, shrink=0.8)
    cbar.set_label('Decrypt/Encrypt Ratio', rotation=270, labelpad=15)
    
    # 10. Performance Zones
    # –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    encrypt_max = encrypt_data['Throughput'].max()
    decrypt_max = decrypt_data['Throughput'].max()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—ã
    high_perf_encrypt = encrypt_data[encrypt_data['Throughput'] > encrypt_max * 0.9]
    medium_perf_encrypt = encrypt_data[(encrypt_data['Throughput'] > encrypt_max * 0.7) & 
                                      (encrypt_data['Throughput'] <= encrypt_max * 0.9)]
    
    high_perf_decrypt = decrypt_data[decrypt_data['Throughput'] > decrypt_max * 0.9]
    medium_perf_decrypt = decrypt_data[(decrypt_data['Throughput'] > decrypt_max * 0.7) & 
                                      (decrypt_data['Throughput'] <= decrypt_max * 0.9)]
    
    ax10.scatter(high_perf_encrypt['Threads'], high_perf_encrypt['ChunkMB'], 
                c='green', s=100, alpha=0.7, label='High Encrypt', marker='o')
    ax10.scatter(medium_perf_encrypt['Threads'], medium_perf_encrypt['ChunkMB'], 
                c='orange', s=80, alpha=0.7, label='Medium Encrypt', marker='o')
    ax10.scatter(high_perf_decrypt['Threads'], high_perf_decrypt['ChunkMB'], 
                c='darkgreen', s=100, alpha=0.7, label='High Decrypt', marker='s')
    ax10.scatter(medium_perf_decrypt['Threads'], medium_perf_decrypt['ChunkMB'], 
                c='darkorange', s=80, alpha=0.7, label='Medium Decrypt', marker='s')
    
    ax10.set_title('üéØ Performance Zones', fontsize=12, fontweight='bold')
    ax10.set_xlabel('Threads')
    ax10.set_ylabel('Chunk Size (MB)')
    ax10.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
    ax10.grid(True, alpha=0.3)
    
    # 11. Optimization Suggestions
    # –ù–∞—Ö–æ–¥–∏–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    encrypt_best = encrypt_data.loc[encrypt_data['Throughput'].idxmax()]
    decrypt_best = decrypt_data.loc[decrypt_data['Throughput'].idxmax()]
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    ax11.axis('off')
    
    recommendations = [
        ["üèÜ BEST CONFIGURATIONS", "", ""],
        ["Operation", "Threads", "Chunk Size"],
        ["Encryption", f"{encrypt_best['Threads']:.0f}", f"{encrypt_best['ChunkMB']:.0f}MB"],
        ["Decryption", f"{decrypt_best['Threads']:.0f}", f"{decrypt_best['ChunkMB']:.0f}MB"],
        ["", "", ""],
        ["üìà PERFORMANCE INSIGHTS", "", ""],
        ["Avg Decrypt Speed", f"{decrypt_data['Throughput'].mean():.0f}", "MB/s"],
        ["Avg Encrypt Speed", f"{encrypt_data['Throughput'].mean():.0f}", "MB/s"],
        ["Decrypt Advantage", f"{((decrypt_data['Throughput'].mean() / encrypt_data['Throughput'].mean() - 1) * 100):.1f}%", ""],
        ["", "", ""],
        ["üí° RECOMMENDATIONS", "", ""],
        ["For Encryption", "Use 16-32MB", "chunks"],
        ["For Decryption", "Use 2-8", "threads"],
        ["General Rule", "Bigger chunks", "for encrypt"],
        ["Thread Scaling", "2-16 threads", "optimal"]
    ]
    
    table = ax11.table(cellText=recommendations,
                      cellLoc='center',
                      loc='center',
                      cellColours=[['lightgray']*3 if i in [0, 5, 10] else ['white']*3 
                                  for i in range(len(recommendations))])
    
    table.auto_set_font_size(False)
    table.set_fontsize(9)
    table.scale(1, 2)
    
    ax11.set_title('üí° Smart Optimization Guide', fontsize=12, fontweight='bold')
    
    # 12. Summary Dashboard
    # –°–æ–∑–¥–∞–µ–º summary —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    ax12.axis('off')
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    encrypt_std = encrypt_data['Throughput'].std()
    decrypt_std = decrypt_data['Throughput'].std()
    total_tests = len(encrypt_data) + len(decrypt_data)
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –º–µ—Ç—Ä–∏–∫–∏
    ax12_sub1 = plt.subplot2grid((4, 3), (3, 2), fig=fig)
    
    # Pie chart –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
    avg_speeds = [encrypt_data['Throughput'].mean(), decrypt_data['Throughput'].mean()]
    labels = ['Encrypt', 'Decrypt']
    colors = ['skyblue', 'lightcoral']
    
    wedges, texts, autotexts = ax12_sub1.pie(avg_speeds, labels=labels, colors=colors, 
                                             autopct='%1.0f%%', startangle=90)
    ax12_sub1.set_title('Performance Share', fontsize=10, fontweight='bold')
    
    return fig, encrypt_best, decrypt_best

def print_mega_summary(encrypt_data, decrypt_data, encrypt_best, decrypt_best):
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–≥–∞-—Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏–∑–∞"""
    
    print("\n" + "="*70)
    print("üöÄ MEGA PERFORMANCE ANALYSIS SUMMARY")
    print("="*70)
    
    print(f"\nüìä DATASET OVERVIEW:")
    print(f"   Total measurements: {len(encrypt_data) + len(decrypt_data)}")
    print(f"   Thread configurations: {len(encrypt_data['Threads'].unique())}")
    print(f"   Chunk size variations: {len(encrypt_data['ChunkMB'].unique())}")
    print(f"   Test combinations per operation: {len(encrypt_data)}")
    
    print(f"\nüèÜ ABSOLUTE CHAMPIONS:")
    print(f"   üîê Encryption King: {encrypt_best['Throughput']:.1f} MB/s")
    print(f"       Configuration: {encrypt_best['Threads']:.0f} threads √ó {encrypt_best['ChunkMB']:.0f}MB chunks")
    print(f"   üîì Decryption Master: {decrypt_best['Throughput']:.1f} MB/s")
    print(f"       Configuration: {decrypt_best['Threads']:.0f} threads √ó {decrypt_best['ChunkMB']:.0f}MB chunks")
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìà DETAILED STATISTICS:")
    for op_name, data in [("Encryption", encrypt_data), ("Decryption", decrypt_data)]:
        stats = data['Throughput'].describe()
        print(f"   {op_name}:")
        print(f"      Mean: {stats['mean']:.1f} MB/s")
        print(f"      Median: {stats['50%']:.1f} MB/s") 
        print(f"      Std Dev: {stats['std']:.1f} MB/s")
        print(f"      Range: {stats['min']:.1f} - {stats['max']:.1f} MB/s")
        print(f"      Coefficient of Variation: {(stats['std']/stats['mean']*100):.1f}%")
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    print(f"\n‚ö° EFFICIENCY ANALYSIS:")
    speed_advantage = (decrypt_data['Throughput'].mean() / encrypt_data['Throughput'].mean() - 1) * 100
    print(f"   Decryption speed advantage: {speed_advantage:.1f}%")
    
    # –õ—É—á—à–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Ç–æ–∫–∞–º
    print(f"\nüéØ OPTIMAL THREAD COUNTS:")
    for op_name, data in [("Encryption", encrypt_data), ("Decryption", decrypt_data)]:
        thread_performance = data.groupby('Threads')['Throughput'].mean().sort_values(ascending=False)
        best_threads = thread_performance.index[0]
        print(f"   {op_name}: {best_threads} threads ({thread_performance.iloc[0]:.1f} MB/s avg)")
    
    # –õ—É—á—à–∏–µ —Ä–∞–∑–º–µ—Ä—ã —á–∞–Ω–∫–æ–≤
    print(f"\nüß© OPTIMAL CHUNK SIZES:")
    for op_name, data in [("Encryption", encrypt_data), ("Decryption", decrypt_data)]:
        chunk_performance = data.groupby('ChunkMB')['Throughput'].mean().sort_values(ascending=False)
        best_chunk = chunk_performance.index[0]
        print(f"   {op_name}: {best_chunk}MB chunks ({chunk_performance.iloc[0]:.1f} MB/s avg)")
    
    print(f"\nüí° KEY INSIGHTS:")
    print(f"   ‚Ä¢ Decryption consistently outperforms encryption")
    print(f"   ‚Ä¢ Larger chunks generally favor encryption performance") 
    print(f"   ‚Ä¢ Thread scaling shows diminishing returns after 8-16 threads")
    print(f"   ‚Ä¢ Configuration matters more than raw thread count")
    
    print("\n" + "="*70)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        encrypt_data, decrypt_data = parse_test_results('input.txt')
        
        if encrypt_data.empty or decrypt_data.empty:
            print("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ input.txt")
            return
        
        print(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è MEGA –∞–Ω–∞–ª–∏–∑–∞:")
        print(f"   Encryption: {len(encrypt_data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   Decryption: {len(decrypt_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–≥–∞-–∞–Ω–∞–ª–∏–∑ —Å 12 –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
        fig, encrypt_optimal, decrypt_optimal = create_mega_analysis(encrypt_data, decrypt_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        fig.savefig('mega_performance_analysis.png', dpi=300, bbox_inches='tight')
        print(f"\nüíæ MEGA –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ mega_performance_analysis.png")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É
        print_mega_summary(encrypt_data, decrypt_data, encrypt_optimal, decrypt_optimal)
        
        plt.show()
        
        print(f"\nüöÄ –°–æ–∑–¥–∞–Ω–æ 12 –≥—Ä–∞—Ñ–∏–∫–æ–≤:")
        print(f"   1-4. –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print(f"   5. Heat Map –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"   6. –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º —á–∞–Ω–∫–æ–≤")
        print(f"   7. Violin plot —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è")
        print(f"   8. –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è")
        print(f"   9. –ö–∞—Ä—Ç–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–µ–π")
        print(f"   10. –ó–æ–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print(f"   11. –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        print(f"   12. Dashboard —Å–≤–æ–¥–∫–∏")
        
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª 'input.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()